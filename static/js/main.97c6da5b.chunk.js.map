{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["math","create","all","buttons","leftSide","id","value","rightSide","isOperator","endsWithOperator","Button","handleClick","onClick","App","useState","result","setResult","lastClicked","setLastClicked","decimalFunc","setDecimalFunc","e","target","concat","test","slice","evaluate","toString","className","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97c6da5b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { create, all } from \"mathjs/number\";\nconst math = create(all);\n\nconst buttons = {\n  leftSide: [\n    { id: \"seven\", value: \"7\" },\n    { id: \"eight\", value: \"8\" },\n    { id: \"nine\", value: \"9\" },\n    { id: \"four\", value: \"4\" },\n    { id: \"five\", value: \"5\" },\n    { id: \"six\", value: \"6\" },\n    { id: \"one\", value: \"1\" },\n    { id: \"two\", value: \"2\" },\n    { id: \"three\", value: \"3\" },\n    { id: \"zero\", value: \"0\" },\n    { id: \"decimal\", value: \".\" },\n    { id: \"equals\", value: \"=\" },\n  ],\n  rightSide: [\n    { id: \"clear\", value: \"CA\" },\n    { id: \"divide\", value: \"/\" },\n    { id: \"multiply\", value: \"*\" },\n    { id: \"subtract\", value: \"-\" },\n    { id: \"add\", value: \"+\" },\n  ],\n};\n\nconst isOperator = /[*/+-]/;\nconst endsWithOperator = /[*/+-]$/;\n\nfunction App() {\n  const [result, setResult] = useState(\"0\");\n  const [lastClicked, setLastClicked] = useState(\"\");\n  const [decimalFunc, setDecimalFunc] = useState(true);\n\n  const handleClick = (e) => {\n    let value = e.target.value;\n    setLastClicked(value);\n    // Handle decimal\n    if (value === \".\") {\n      if (decimalFunc) {\n        setResult(result.concat(value));\n        setDecimalFunc(false);\n        return;\n      }\n      return;\n    }\n\n    if (isOperator.test(value)) {\n      setDecimalFunc(true);\n    }\n    // Handle \"minus\" cases\n    if (value === \"-\" && /[*/+]/.test(lastClicked)) {\n      setResult(result.concat(value));\n      return;\n    }\n\n    if (lastClicked === \"-\" && /[*/+]/.test(value)) {\n      setResult(result.slice(0, -2) + value);\n      return;\n    }\n    // Handle operators\n    if (isOperator.test(lastClicked) && isOperator.test(value)) {\n      setResult(result.slice(0, -1) + value);\n      return;\n    }\n    // Handle clear button\n    if (value === \"CA\") {\n      setResult(\"0\");\n      setDecimalFunc(true);\n      return;\n    }\n    // Handle equals button\n    if (value === \"=\") {\n      if (endsWithOperator.test(result)) {\n        setResult(math.evaluate(result.slice(0, -1)).toString());\n        return;\n      }\n      setResult(math.evaluate(result).toString());\n      return;\n    }\n    // Handle initial state case\n    if (result === \"0\") {\n      setResult(\"\".concat(value));\n      return;\n    }\n\n    setResult(result.concat(value));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>JavaScript Calculator</h1>\n      <div id=\"display\">{result}</div>\n      <div>the last clicked value is: {lastClicked}</div>\n      {buttons.leftSide.map(({ id, value }) => (\n        <Button key={id} id={id} value={value} handleClick={handleClick} />\n      ))}\n      {buttons.rightSide.map(({ id, value }) => (\n        <Button key={id} id={id} value={value} handleClick={handleClick} />\n      ))}\n    </div>\n  );\n}\n\nfunction Button({ id, value, handleClick }) {\n  return (\n    <button id={id} value={value} onClick={handleClick}>\n      {value}\n    </button>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}